// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions", "fullTextSearchPostgres"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String    @unique
  emailVerified          DateTime? @map("email_verified")
  emailVerificationToken String?   @unique @map("email_verification_token")
  emailTokenExpires      DateTime? @map("email_token_expires")
  image                  String?
  password               String?
  preferredLanguage      String    @default("en") @map("preferred_language")
  timezone               String    @default("UTC")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  lastActiveAt           DateTime? @map("last_active_at")
  role                   UserRole  @default(USER)

  // Relations
  accounts           Account[]
  sessions           Session[]
  conversations      Conversation[]
  insights           UserInsight[]
  subscriptions      Subscription[]
  spiritualProfile   SpiritualProfile?
  preferences        UserPreference?
  verificationTokens VerificationToken[]

  @@index([email])
  @@index([lastActiveAt])
  @@index([emailVerificationToken])
  @@map("users")
}

enum UserRole {
  USER
  CONTRIBUTOR
  EDITOR
  MEDIA
  ADMIN
}

// Enhanced VerificationToken for IALchemist auth system
model VerificationToken {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  token     String    @unique
  type      TokenType @default(EMAIL_VERIFICATION)
  expires   DateTime
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expires])
  @@map("verification_tokens")
}

// Legacy NextAuth VerificationToken (keep for compatibility)
model NextAuthVerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Conversation System
model Conversation {
  id            String             @id @default(cuid())
  userId        String             @map("user_id")
  title         String?
  summary       String?            @db.Text
  language      String             @default("en")
  status        ConversationStatus @default(ACTIVE)
  metadata      Json?
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  lastMessageAt DateTime?          @map("last_message_at")

  // Relations
  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  topics   ConversationTopic[]
  insights UserInsight[]

  @@index([userId, createdAt])
  @@index([userId, status])
  @@index([lastMessageAt])
  @@map("conversations")
}

model Message {
  id             String      @id @default(cuid())
  conversationId String      @map("conversation_id")
  role           MessageRole
  content        String      @db.Text
  metadata       Json?

  // Vector embedding for semantic search
  embedding Unsupported("vector(1536)")?

  // Hermetic context
  hermeticPrinciples String[] @map("hermetic_principles")
  emotionalState     String?  @map("emotional_state")

  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([role])
  @@map("messages")
}

// Knowledge & Topics
model Topic {
  id                String        @id @default(cuid())
  name              String        @unique
  nameTranslations  Json          @map("name_translations") // {"en": "Transformation", "cs": "Transformace", ...}
  description       String?       @db.Text
  hermeticPrinciple String?       @map("hermetic_principle")
  category          TopicCategory

  // Relations
  conversations ConversationTopic[]

  @@index([category])
  @@index([hermeticPrinciple])
  @@map("topics")
}

model ConversationTopic {
  id             String   @id @default(cuid())
  conversationId String   @map("conversation_id")
  topicId        String   @map("topic_id")
  relevanceScore Float    @default(1.0) @map("relevance_score")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  topic        Topic        @relation(fields: [topicId], references: [id])

  @@unique([conversationId, topicId])
  @@index([topicId])
  @@map("conversation_topics")
}

// Spiritual Journey & Insights
model UserInsight {
  id             String            @id @default(cuid())
  userId         String            @map("user_id")
  conversationId String?           @map("conversation_id")
  content        String            @db.Text
  type           InsightType
  significance   SignificanceLevel
  metadata       Json?
  createdAt      DateTime          @default(now()) @map("created_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: SetNull)

  @@index([userId, type])
  @@index([userId, createdAt])
  @@index([significance])
  @@map("user_insights")
}

model SpiritualProfile {
  id                  String         @id @default(cuid())
  userId              String         @unique @map("user_id")
  journeyStartDate    DateTime       @default(now()) @map("journey_start_date")
  currentLevel        SpiritualLevel @default(SEEKER) @map("current_level")
  principlesStudied   String[]       @map("principles_studied")
  practicesCompleted  Int            @default(0) @map("practices_completed")
  transformationScore Float          @default(0) @map("transformation_score")
  metadata            Json?
  updatedAt           DateTime       @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("spiritual_profiles")
}

// Subscription & Billing
model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @map("user_id")
  stripeCustomerId     String?            @unique @map("stripe_customer_id")
  stripeSubscriptionId String?            @unique @map("stripe_subscription_id")
  plan                 SubscriptionPlan
  status               SubscriptionStatus
  currentPeriodStart   DateTime           @map("current_period_start")
  currentPeriodEnd     DateTime           @map("current_period_end")
  cancelAtPeriodEnd    Boolean            @default(false) @map("cancel_at_period_end")
  metadata             Json?
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  usageRecords UsageRecord[]

  @@index([userId])
  @@index([status])
  @@index([stripeCustomerId])
  @@map("subscriptions")
}

model UsageRecord {
  id             String      @id @default(cuid())
  subscriptionId String      @map("subscription_id")
  metric         UsageMetric
  count          Int
  date           DateTime    @db.Date
  metadata       Json?
  createdAt      DateTime    @default(now()) @map("created_at")

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, metric, date])
  @@index([date])
  @@map("usage_records")
}

// User Preferences
model UserPreference {
  id                   String               @id @default(cuid())
  userId               String               @unique @map("user_id")
  theme                String               @default("ancient")
  fontSize             String               @default("medium") @map("font_size")
  aiVerbosity          VerbosityLevel       @default(BALANCED) @map("ai_verbosity")
  notificationsEnabled Boolean              @default(true) @map("notifications_enabled")
  emailDigest          EmailDigestFrequency @default(WEEKLY) @map("email_digest")
  dataRetention        Int                  @default(0) @map("data_retention") // 0 = unlimited, otherwise days
  exportFormat         String               @default("pdf") @map("export_format")
  metadata             Json?
  updatedAt            DateTime             @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// Enums
enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

enum TopicCategory {
  HERMETIC_PRINCIPLE
  LIFE_CHALLENGE
  DAILY_PRACTICE
  TRANSFORMATION
  PHILOSOPHY
  RITUAL
  OTHER
}

enum InsightType {
  BREAKTHROUGH
  REALIZATION
  CHALLENGE
  PRACTICE
  TRANSFORMATION
  MILESTONE
}

enum SignificanceLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SpiritualLevel {
  SEEKER
  STUDENT
  ADEPT
  MASTER
}

enum SubscriptionPlan {
  FREE_TRIAL
  SEEKER
  ADEPT
  MASTER
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  PAUSED
}

enum UsageMetric {
  CONVERSATIONS
  MESSAGES
  TOKENS
  EXPORTS
  API_CALLS
}

enum VerbosityLevel {
  CONCISE
  BALANCED
  DETAILED
  EXTENSIVE
}

enum EmailDigestFrequency {
  NEVER
  DAILY
  WEEKLY
  MONTHLY
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  MAGIC_LINK
}
