
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  emailVerificationToken: 'emailVerificationToken',
  emailTokenExpires: 'emailTokenExpires',
  image: 'image',
  password: 'password',
  preferredLanguage: 'preferredLanguage',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastActiveAt: 'lastActiveAt',
  role: 'role'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  type: 'type',
  expires: 'expires',
  createdAt: 'createdAt'
};

exports.Prisma.NextAuthVerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  summary: 'summary',
  language: 'language',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastMessageAt: 'lastMessageAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  role: 'role',
  content: 'content',
  metadata: 'metadata',
  hermeticPrinciples: 'hermeticPrinciples',
  emotionalState: 'emotionalState',
  createdAt: 'createdAt'
};

exports.Prisma.TopicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameTranslations: 'nameTranslations',
  description: 'description',
  hermeticPrinciple: 'hermeticPrinciple',
  category: 'category'
};

exports.Prisma.ConversationTopicScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  topicId: 'topicId',
  relevanceScore: 'relevanceScore',
  createdAt: 'createdAt'
};

exports.Prisma.UserInsightScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  conversationId: 'conversationId',
  content: 'content',
  type: 'type',
  significance: 'significance',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SpiritualProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  journeyStartDate: 'journeyStartDate',
  currentLevel: 'currentLevel',
  principlesStudied: 'principlesStudied',
  practicesCompleted: 'practicesCompleted',
  transformationScore: 'transformationScore',
  metadata: 'metadata',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  plan: 'plan',
  status: 'status',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsageRecordScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  metric: 'metric',
  count: 'count',
  date: 'date',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.UserPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  theme: 'theme',
  fontSize: 'fontSize',
  aiVerbosity: 'aiVerbosity',
  notificationsEnabled: 'notificationsEnabled',
  emailDigest: 'emailDigest',
  dataRetention: 'dataRetention',
  exportFormat: 'exportFormat',
  metadata: 'metadata',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerificationToken: 'emailVerificationToken',
  image: 'image',
  password: 'password',
  preferredLanguage: 'preferredLanguage',
  timezone: 'timezone'
};

exports.Prisma.VerificationTokenOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token'
};

exports.Prisma.NextAuthVerificationTokenOrderByRelevanceFieldEnum = {
  identifier: 'identifier',
  token: 'token'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.ConversationOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  summary: 'summary',
  language: 'language'
};

exports.Prisma.MessageOrderByRelevanceFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  content: 'content',
  hermeticPrinciples: 'hermeticPrinciples',
  emotionalState: 'emotionalState'
};

exports.Prisma.TopicOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  hermeticPrinciple: 'hermeticPrinciple'
};

exports.Prisma.ConversationTopicOrderByRelevanceFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  topicId: 'topicId'
};

exports.Prisma.UserInsightOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  conversationId: 'conversationId',
  content: 'content'
};

exports.Prisma.SpiritualProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  principlesStudied: 'principlesStudied'
};

exports.Prisma.SubscriptionOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId'
};

exports.Prisma.UsageRecordOrderByRelevanceFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId'
};

exports.Prisma.UserPreferenceOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  theme: 'theme',
  fontSize: 'fontSize',
  exportFormat: 'exportFormat'
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  CONTRIBUTOR: 'CONTRIBUTOR',
  EDITOR: 'EDITOR',
  MEDIA: 'MEDIA',
  ADMIN: 'ADMIN'
};

exports.TokenType = exports.$Enums.TokenType = {
  EMAIL_VERIFICATION: 'EMAIL_VERIFICATION',
  PASSWORD_RESET: 'PASSWORD_RESET',
  MAGIC_LINK: 'MAGIC_LINK'
};

exports.ConversationStatus = exports.$Enums.ConversationStatus = {
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED',
  DELETED: 'DELETED'
};

exports.MessageRole = exports.$Enums.MessageRole = {
  USER: 'USER',
  ASSISTANT: 'ASSISTANT',
  SYSTEM: 'SYSTEM'
};

exports.TopicCategory = exports.$Enums.TopicCategory = {
  HERMETIC_PRINCIPLE: 'HERMETIC_PRINCIPLE',
  LIFE_CHALLENGE: 'LIFE_CHALLENGE',
  DAILY_PRACTICE: 'DAILY_PRACTICE',
  TRANSFORMATION: 'TRANSFORMATION',
  PHILOSOPHY: 'PHILOSOPHY',
  RITUAL: 'RITUAL',
  OTHER: 'OTHER'
};

exports.InsightType = exports.$Enums.InsightType = {
  BREAKTHROUGH: 'BREAKTHROUGH',
  REALIZATION: 'REALIZATION',
  CHALLENGE: 'CHALLENGE',
  PRACTICE: 'PRACTICE',
  TRANSFORMATION: 'TRANSFORMATION',
  MILESTONE: 'MILESTONE'
};

exports.SignificanceLevel = exports.$Enums.SignificanceLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.SpiritualLevel = exports.$Enums.SpiritualLevel = {
  SEEKER: 'SEEKER',
  STUDENT: 'STUDENT',
  ADEPT: 'ADEPT',
  MASTER: 'MASTER'
};

exports.SubscriptionPlan = exports.$Enums.SubscriptionPlan = {
  FREE_TRIAL: 'FREE_TRIAL',
  SEEKER: 'SEEKER',
  ADEPT: 'ADEPT',
  MASTER: 'MASTER'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  TRIAL: 'TRIAL',
  ACTIVE: 'ACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELED: 'CANCELED',
  PAUSED: 'PAUSED'
};

exports.UsageMetric = exports.$Enums.UsageMetric = {
  CONVERSATIONS: 'CONVERSATIONS',
  MESSAGES: 'MESSAGES',
  TOKENS: 'TOKENS',
  EXPORTS: 'EXPORTS',
  API_CALLS: 'API_CALLS'
};

exports.VerbosityLevel = exports.$Enums.VerbosityLevel = {
  CONCISE: 'CONCISE',
  BALANCED: 'BALANCED',
  DETAILED: 'DETAILED',
  EXTENSIVE: 'EXTENSIVE'
};

exports.EmailDigestFrequency = exports.$Enums.EmailDigestFrequency = {
  NEVER: 'NEVER',
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  VerificationToken: 'VerificationToken',
  NextAuthVerificationToken: 'NextAuthVerificationToken',
  Conversation: 'Conversation',
  Message: 'Message',
  Topic: 'Topic',
  ConversationTopic: 'ConversationTopic',
  UserInsight: 'UserInsight',
  SpiritualProfile: 'SpiritualProfile',
  Subscription: 'Subscription',
  UsageRecord: 'UsageRecord',
  UserPreference: 'UserPreference'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
